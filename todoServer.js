/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    //üëç
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/1234
    //üëç
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    //üëç
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    //üëç
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123
    //üëç
    - For any other route not defined in the server return 404 

   
  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const bodyParser = require("body-parser");
const fs = require("fs");
const app = express();

app.use(bodyParser.json());

function findIndex(arr, id) {
  for (let i = 0; i < arr.length; i++) {
    if (arr[i].id === id) return i;
  }
  return -1;
}
function removeAtIndex(arr, index) {
  let newArray = [];
  for (let i = 0; i < arr.length; i++) {
    if (i !== index) newArray.push(arr[i]);
  }
  return newArray;
}
app.get("/todos", (req, res) => {
  fs.readFile("/files/todos.json", "utf8", (err, data) => {
    if (err) throw err;
    res.json(JSON.parse(data));
  });
});

app.get("/todos/:id", (req, res) => {
  fs.readFile("/files/todos.json", "utf8", (err, data) => {
    if (err) throw err;
    const todos = JSON.parse(data);
    const todoIndex = findIndex(todos, parseInt(req.params.id));

    if (todoIndex === -1) {
      res.status(404).send({ msg: "error" });
    } else {
      res.json(todos[todoIndex]);
    }
  });
});

app.post("/todos", (req, res) => {
  let id = Math.floor(Math.random() * 50);
  let title = req.body.title;
  let description = req.body.description;
  let isCompleted = req.body.isCompleted;
  fs.readFile("/files/todos.json", "utf-8", (err, data) => {
    if (err) {
      let data = [];
    } else {
      data = JSON.parse(data);
    }
    data.push({ id, title, isCompleted, description });
    fs.writeFile("/files/todos.json", JSON.stringify(data), (err, data) => {
      if (err) {
        res.status(500).send({ msg: "unable to create new todo" });
      } else {
        res.status(200).send({ msg: "success" });
      }
    });
  });
});

app.put("/todos/:id", (req, res) => {
  fs.readFile("/files/todos.json", "utf-8", (err, data) => {
    if (err) throw err;
    let todos = JSON.parse(data);
    let todoIndex = findIndex(todos, parseInt(req.params.id));

    if (todoIndex === -1) {
      res.status(404).send({ msg: "any todo is not found" });
      return;
    }
    if (todos[todoIndex].isCompleted) {
      res.status(500).send({ msg: "this todo task is already done" });
      return;
    }
    todos[todoIndex].isCompleted = req.body.title;
    todos[todoIndex].isCompleted = req.body.isCompleted;
    fs.writeFile("/files/todos.json", JSON.stringify(todos), (err, data) => {
      if (err) {
        res.status(500).send({ msg: "unable to update todo" });
      } else {
        res.status(200).send({ msg: "task completed" });
      }
    });
  });
});

app.delete("/todos/:id", (req, res) => {
  fs.readFile("/files/todos.json", (err, data) => {
    if (err) throw err;
    let todos = JSON.parse(data);
    let todoIndex = findIndex(todos, parseInt(req.params.id));
    if (todoIndex === -1) {
      res.status(404).send({ msg: "any todo is not found" });
      return;
    } else {
      todos = removeAtIndex(todos, todoIndex);
    }

    fs.writeFile("/files/todos.json", JSON.stringify(todos), (err, data) => {
      if (err) throw err;
      res.status(200).send({ msg: " task completed and deleted" });
    });
  });
});

app.use((req, res, next) => {
  res.status(404).send();
});
app.listen(3000, () => {
  console.log("Server is running on 3000 port");
});

module.exports = app;
